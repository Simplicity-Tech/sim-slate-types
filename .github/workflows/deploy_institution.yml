name: Deploy
on:
  push:
    branches: [staging, devel]
    tags:
      - 'v*'
  workflow_dispatch:

concurrency:
  group: env-${{ github.ref }}

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: code checkout
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.ref}}
      - run: git fetch --no-tags --prune --depth=5 origin master
      - name: build-app
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: create .env devel
        if: ${{ github.ref == 'refs/heads/devel' }}
        run: |
          cat << EOF >> .env
          NX_ENVIRONMENT=development
          NX_COGNITO_USER_POOL_ID=${{ secrets.NX_COGNITO_USER_POOL_ID_DEV }}
          NX_COGNITO_CLIENT_ID=${{ secrets.NX_COGNITO_CLIENT_ID_DEV }}
          NX_MIXPANEL_API_KEY=${{ secrets.NX_MIXPANEL_API_KEY_DEV }}
          NX_AWS_GRAPHQL_ENDPOINT=${{ secrets.NX_AWS_GRAPHQL_ENDPOINT_DEV }}
          NX_AWS_API_KEY=${{ secrets.NX_AWS_API_KEY_DEV }}
          NX_SENTRY_DSN=${{ secrets.NX_SENTRY_DSN_DEV }}
          NX_SENTRY_AUTH_TOKEN=${{ secrets.NX_SENTRY_AUTH_TOKEN_DEV }}
          NX_GOOGLE_MAPS_API_KEY=${{ secrets.NX_GOOGLE_MAPS_API_KEY_DEV }}
          EOF
      - name: create .env staging
        if: ${{ github.ref == 'refs/heads/staging' }}
        run: |
          cat << EOF >> .env
          NX_ENVIRONMENT=development
          NX_COGNITO_USER_POOL_ID=${{ secrets.NX_COGNITO_USER_POOL_ID_STA }}
          NX_COGNITO_CLIENT_ID=${{ secrets.NX_COGNITO_CLIENT_ID_STA }}
          NX_MIXPANEL_API_KEY=${{ secrets.NX_MIXPANEL_API_KEY_STA }}
          NX_AWS_GRAPHQL_ENDPOINT=${{ secrets.NX_AWS_GRAPHQL_ENDPOINT_STA }}
          NX_AWS_API_KEY=${{ secrets.NX_AWS_API_KEY_STA }}
          NX_SENTRY_DSN=${{ secrets.NX_SENTRY_DSN_STA }}
          NX_SENTRY_AUTH_TOKEN=${{ secrets.NX_SENTRY_AUTH_TOKEN_STA }}
          NX_GOOGLE_MAPS_API_KEY=${{ secrets.NX_GOOGLE_MAPS_API_KEY_STA }}
          EOF
      - name: create .env prod
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        run: |
          cat << EOF >> .env
          NX_ENVIRONMENT=production
          NX_COGNITO_USER_POOL_ID=${{ secrets.NX_COGNITO_USER_POOL_ID_PROD }}
          NX_COGNITO_CLIENT_ID=${{ secrets.NX_COGNITO_CLIENT_ID_PROD }}
          NX_MIXPANEL_API_KEY=${{ secrets.NX_MIXPANEL_API_KEY_PROD }}
          NX_AWS_GRAPHQL_ENDPOINT=${{ secrets.NX_AWS_GRAPHQL_ENDPOINT_PROD }}
          NX_AWS_API_KEY=${{ secrets.NX_AWS_API_KEY_PROD }}
          NX_SENTRY_DSN=${{ secrets.NX_SENTRY_DSN_PROD }}
          NX_SENTRY_AUTH_TOKEN=${{ secrets.NX_SENTRY_AUTH_TOKEN_PROD }}
          NX_GOOGLE_MAPS_API_KEY=${{ secrets.NX_GOOGLE_MAPS_API_KEY_PROD }}
          EOF

      - name: Cache node_modules
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          path: node_modules/
          key: ${{ runner.os }}-yarn-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install packages
        run: yarn install

      - name: Install nx
        run: yarn global add nx

      - name: Generate GraphQl schema
        run: yarn graphql:codegen

      - name: Build institution-admin
        run: nx build institution-admin --prod

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: institution-admin-artifact
          path: |
            dist/apps/institution-admin/
            !dist/apps/institution-admin/*.map
          retention-days: 1
  upload-s3:
    runs-on: ubuntu-latest
    name: upload-s3-institution-app
    needs: setup
    steps:
      - name: Download institution-admin-artifact
        uses: actions/download-artifact@v2
        with:
          name: institution-admin-artifact

      - name: set env for dev bucket name
        if: ${{ github.ref == 'refs/heads/devel' }}
        run: |
          echo AWS_S3_BUCKET_DESTINATION=${{ secrets.AWS_S3_BUCKET_IA_DEV }} >> $GITHUB_ENV
          echo AWS_REGION_S3=us-east-1 >> $GITHUB_ENV
          echo AWS_CDN_DISTRIBUTION_IA=${{ secrets.AWS_CDN_DISTRIBUTION_IA_DEV }} >> $GITHUB_ENV
          echo ENVIRONMENT=testing >> $GITHUB_ENV
          echo APP_URL=https://testing-admin.onesimplicity.com/ >> $GITHUB_ENV

      - name: Set env for staging bucket name
        if: ${{ github.ref == 'refs/heads/staging' }}
        run: |
          echo AWS_S3_BUCKET_DESTINATION=${{ secrets.AWS_S3_BUCKET_IA_STA }} >> $GITHUB_ENV
          echo AWS_REGION_S3=us-east-1 >> $GITHUB_ENV
          echo AWS_CDN_DISTRIBUTION_IA=${{ secrets.AWS_CDN_DISTRIBUTION_IA_STA }} >> $GITHUB_ENV
          echo ENVIRONMENT=staging >> $GITHUB_ENV
          echo APP_URL=https://staging-admin.onesimplicity.com/ >> $GITHUB_ENV

      - name: Set env for prod bucket name
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        run: |
          echo AWS_S3_BUCKET_DESTINATION=${{ secrets.AWS_S3_BUCKET_IA_PROD }} >> $GITHUB_ENV
          echo AWS_REGION_S3=us-east-1 >> $GITHUB_ENV
          echo AWS_CDN_DISTRIBUTION_IA=${{ secrets.AWS_CDN_DISTRIBUTION_IA_PROD }} >> $GITHUB_ENV
          echo ENVIRONMENT=production >> $GITHUB_ENV
          echo APP_URL=https://admin.onesimplicity.com/ >> $GITHUB_ENV

      - name: upload to bucket
        uses: yavinenana/s3-sync-gha@v1.0.5
        with:
          args: --acl public-read --follow-symlinks --delete --cache-control 'max-age=2592000' --exclude 'locales/*'
        env:
          AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET_DESTINATION}}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_CD }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_CD }}
          AWS_REGION: ${{ env.AWS_REGION_S3}}

      - name: upload to locales
        uses: yavinenana/s3-sync-gha@v1.0.5
        with:
          args: --acl public-read --follow-symlinks --cache-control 'max-age=0'
        env:
          AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET_DESTINATION}}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_CD }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_CD }}
          AWS_REGION: ${{ env.AWS_REGION_S3}}
          SOURCE_DIR: locales/
          DEST_DIR: locales/

      - name: invalidate-cdn-distributon
        uses: chetan/invalidate-cloudfront-action@master
        env:
          DISTRIBUTION: ${{ env.AWS_CDN_DISTRIBUTION_IA }} #Cloudfront distribution ID
          PATHS: /*
          AWS_REGION: ${{ env.AWS_REGION_S3 }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_CD }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_CD }}

      - name: Notify slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: pullreminders/slack-action@master
        with:
          args:
            '{\"channel\":\"C02CYG64KJQ\",\"mrkdwn\":\"C02CYG64KJQ\",\"text\":\"*New admin version has been released* \n
            _Environment_: ${{env.ENVIRONMENT}} \n
            _Trigger commit msg_: ${{ github.event.head_commit.message }} \n
            _Deployed on_: ${{env.APP_URL}} \"}'
